----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    10:56:12 01/10/2019 
-- Design Name: 
-- Module Name:    ALU - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity ALU is
    Port ( A : in  STD_LOGIC_VECTOR (7 downto 0);
           B : in  STD_LOGIC_VECTOR (7 downto 0);
           Cin : in  STD_LOGIC;
           Op : in  STD_LOGIC_VECTOR (3 downto 0);
           Y : out  STD_LOGIC_VECTOR (7 downto 0);
           Cout : out  STD_LOGIC;
           V : out  STD_LOGIC;
           Z : out  STD_LOGIC;
           S : out  STD_LOGIC);
end ALU;

architecture Behavioral of ALU is

signal uns_A: unsigned(7 downto 0); -- 8 bits
signal uns_B: unsigned(7 downto 0); -- 8 bits
signal uns_Cin: unsigned(0 downto 0); -- 1 bit
signal uns_Cout_Y: unsigned(8 downto 0); -- 9 bits

signal mult_A : STD_LOGIC_VECTOR (7 downto 0);
signal mult_B : STD_LOGIC_VECTOR (7 downto 0);
signal mult_Cin : STD_LOGIC;

signal mult_Cout:  STD_LOGIC;
signal res_Cout : STD_LOGIC;

signal mult_Y:  STD_LOGIC_VECTOR (7 downto 0);
signal res_Y : STD_LOGIC_VECTOR (7 downto 0);

signal mult_V:  STD_LOGIC;


begin

--mult_CHAR stands for multiplexer and not multiplier

mult_A <= A when op = "0000" else
			 A when op = "0001" else
			 A when op = "0010" else
			 A when op = "0011" else
			 A when op = "0100" else
			 A when op = "0101" else
			 "00000000";
			 
uns_A <= unsigned(mult_A);
			 
mult_B <=  B when op = "0000" else
			  B when op = "0001" else
	  (not B) when op = "0010" else
	  (not B) when op = "0011" else
  "00000001" when op = "0100" else
  "11111111" when op = "0101" else
			  (not A);
			  
uns_B <= unsigned(mult_B);

mult_Cin <= '0' when op = "0000" else
				Cin when op = "0001" else
				'1' when op = "0010" else
		(not Cin) when op = "0011" else
				'0' when op = "0100" else
				'0' when op = "0101" else
				'1';

uns_Cin(0) <= mult_Cin;

-- concatenating "0" to uns_A to make it 9 bits wide
uns_Cout_Y <= ("0" & uns_A) + uns_B + uns_Cin;

mult_Cout <= uns_Cout_Y(8);

res_Cout <= mult_Cout when op = "0000" else
				mult_Cout when op = "0001" else
		(not mult_Cout) when op = "0010" else
		(not mult_Cout) when op = "0011" else
				mult_Cout when op = "0100" else
				mult_Cout when op = "0101" else
		(not mult_Cout) when op = "0110" else
				'0';
				
Cout <= res_Cout;
				
mult_Y <= std_logic_vector(uns_Cout_Y(7 downto 0));

res_Y <= mult_Y when op = "0000" else
			mult_Y when op = "0001" else
			mult_Y when op = "0010" else
			mult_Y when op = "0011" else
			mult_Y when op = "0100" else
			mult_Y when op = "0101" else
			mult_Y when op = "0110" else
		  (not A) when op = "0111" else
		(A and B) when op = "1000" else
		 (A or B) when op = "1001" else
		(A xor B) when op = "1010";
		
Y <= res_Y;

Z <= '1' when res_Y = "00000000" else
	  '0';

S <= res_Y(7);

mult_V <= '0' when op = "0111" else
			 '0' when op = "1000" else
			 '0' when op = "1001" else
			 '0' when op = "1010" else
			 ((not A(7)) and (not B(7)) and (mult_Y(7))) or 
			 ((A(7)) and (B(7)) and (not mult_Y(7)));

V <= mult_V;

end Behavioral;